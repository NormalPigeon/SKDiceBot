/// <reference types="koa-bodyparser" />
/// <reference types="node" />
import Koa from 'koa';
import { KaiheilaEvent, KHSystemMessage } from './kaiheila.type';
import { EventEmitter } from 'events';
import { AudioMessage, FileMesage as FileMessage, ImageMessage, KMarkDownMessage, MessageType, TextMessage, VideoMessage } from './types';
import { AxiosInstance } from 'axios';
export interface BotConfig {
    mode: 'webhook' | 'websocket' | 'pc';
    port?: number;
    key?: string;
    token: string;
    /**
     * 校验码，需要和
     */
    verifyToken?: string;
    /**
     * cookie 客户端模拟模式必填。
     */
    cookies?: string;
    /**
     * 是否忽略解密错误的消息
     * 也不会产生error事件，会直接next
     */
    ignoreDecryptError: boolean;
}
export interface BotEventEmitter {
    /**
     * 获取原始事件，challenge已被剔除
     */
    on(event: 'rawEvent', listener: (event: KaiheilaEvent) => void): this;
    /**
     * 系统事件，目前还没有，占坑，勿用
     */
    on(event: 'systemMessage', listener: (event: KHSystemMessage) => void): this;
    /**
     * 注册监听所有处理过的事件
     */
    on(event: 'message', listener: (event: TextMessage | ImageMessage | VideoMessage | FileMessage | AudioMessage | KMarkDownMessage) => void): this;
    /**
     * 注册监听未知的事件
     */
    on(event: 'unknownEvent', listener: (event: KaiheilaEvent) => void): this;
}
export declare class KaiheilaBot extends EventEmitter implements BotEventEmitter {
    private key?;
    config: BotConfig;
    private snMap;
    axios: AxiosInstance;
    httpServer?: Koa<Koa.DefaultState, Koa.DefaultContext>;
    /**
     * 开黑啦机器人实例
     * @param config 设置
     */
    constructor(config: BotConfig);
    /**
     * 获取中间件
     * 可用于共用Koa实例。
     */
    getMiddleware(): (context: Koa.ParameterizedContext<Koa.DefaultState, Koa.DefaultContext>, next: Koa.Next) => Promise<any>;
    private route;
    private handleMessage;
    /**
     * 解密
     * @param request 请求体
     */
    private decryptRequest;
    private verifyRequest;
    private verifySN;
    private handleChallenge;
    /**
     * 发送频道聊天消息
     * @param type 消息类型
     * @param channelId 目标频道 id
     * @param content 消息内容
     * @param quote 回复某条消息的 msgId
     */
    sendChannelMessage(type: MessageType, channelId: string, content: string, quote?: string): Promise<import("axios").AxiosResponse<any>>;
    getUserIntimacy(userId: string): Promise<import("axios").AxiosResponse<any>>;
    updateUserIntimacy(userId: string, score?: number, socialInfo?: string, imgId?: number): Promise<import("axios").AxiosResponse<any>>;
    private post;
    private get;
    /**
     * 启动监听
     *
     * webhook模式下会在指定端口号启动一个http服务
     */
    listen(): void;
    getUserState(): Promise<any>;
    /**
     * 链接Websocket
     */
    connect(): void;
}
