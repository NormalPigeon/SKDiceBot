"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KaiheilaBot = void 0;
const koa_1 = __importDefault(require("koa"));
const koa_bodyparser_1 = __importDefault(require("koa-bodyparser"));
const crypto_1 = require("crypto");
const utils_1 = require("./utils");
const events_1 = require("events");
const types_1 = require("./types");
const axios_1 = __importDefault(require("axios"));
const lodash_1 = require("lodash");
function DefaultConfig() {
    return {
        mode: 'webhook',
        port: 8600,
        ignoreDecryptError: true
    };
}
class KaiheilaBot extends events_1.EventEmitter {
    /**
     * 开黑啦机器人实例
     * @param config 设置
     */
    constructor(config) {
        super();
        this.snMap = {};
        this.config = DefaultConfig();
        Object.assign(this.config, config);
        if (!config.token) {
            throw new Error('Token Not Provided');
        }
        this.config = config;
        if (this.config.mode === 'pc') {
            this.axios = axios_1.default.create({
                baseURL: 'https://www.kaiheila.cn/api',
                headers: {
                    cookies: this.config.cookies
                }
            });
        }
        else {
            this.axios = axios_1.default.create({
                baseURL: 'https://www.kaiheila.cn/api',
                headers: {
                    Authorization: 'Bot ' + this.config.token
                }
            });
        }
        if (config.key) {
            this.key = utils_1.zeroPadding(config.key || '');
        }
    }
    /**
     * 获取中间件
     * 可用于共用Koa实例。
     */
    getMiddleware() {
        return this.route.bind(this);
    }
    async route(context, next) {
        const request = context.request.body;
        let eventRequest;
        if (this.key) {
            try {
                eventRequest = this.decryptRequest(request);
            }
            catch (error) {
                if (this.config.ignoreDecryptError) {
                    return next();
                }
                else {
                    this.emit('error', error);
                    context.throw('Not Kaiheila Request or bad encryption or unencrypted request', 500);
                }
            }
        }
        else {
            eventRequest = request;
        }
        if (!this.verifyRequest(eventRequest)) {
            return next();
        }
        if (this.handleChallenge(eventRequest, context)) {
            return;
        }
        context.body = 1;
        if (!this.verifySN(eventRequest)) {
            return;
        }
        this.handleMessage(eventRequest);
    }
    handleMessage(eventRequest) {
        try {
            this.emit('rawEvent', lodash_1.cloneDeep(eventRequest.d));
        }
        catch (error) {
            this.emit('error', error);
        }
        switch (eventRequest.d.type) {
            case 255:
                this.emit('systemMessage', lodash_1.cloneDeep(eventRequest.d));
                break;
            case 1:
                this.emit('message', new types_1.TextMessage(lodash_1.cloneDeep(eventRequest.d)));
		this.emit('textmessage', lodash_1.cloneDeep(eventRequest.d));
                break;
            case 2:
                this.emit('message', new types_1.ImageMessage(lodash_1.cloneDeep(eventRequest.d)));
                break;
            case 3:
                this.emit('message', new types_1.VideoMessage(lodash_1.cloneDeep(eventRequest.d)));
                break;
            case 4:
                this.emit('message', new types_1.FileMesage(lodash_1.cloneDeep(eventRequest.d)));
                break;
            case 8:
                this.emit('message', new types_1.AudioMessage(lodash_1.cloneDeep(eventRequest.d)));
                break;
            case 9:
                this.emit('message', new types_1.KMarkDownMessage(lodash_1.cloneDeep(eventRequest.d)));
                break;
            default:
                this.emit('unknownEvent', lodash_1.cloneDeep(eventRequest.d));
                break;
        }
    }
    /**
     * 解密
     * @param request 请求体
     */
    decryptRequest(request) {
        if (typeof request.encrypt === 'string') {
            if (!this.key) {
                throw new Error('No Key');
            }
            const encrypted = Buffer.from(request.encrypt, 'base64');
            const iv = encrypted.subarray(0, 16);
            const encryptedData = Buffer.from(encrypted.subarray(16, encrypted.length).toString(), 'base64');
            const decipher = crypto_1.createDecipheriv('aes-256-cbc', this.key, iv);
            const decrypt = Buffer.concat([decipher.update(encryptedData), decipher.final()]);
            const data = JSON.parse(decrypt.toString());
            return data;
        }
        else {
            if (this.config.ignoreDecryptError) {
                throw new Error('Unencrypted Request');
            }
            return request;
        }
    }
    verifyRequest(body) {
        if (typeof body !== 'object' || typeof body.s !== 'number' || typeof body.d !== 'object') {
            return false;
        }
        if (this.config.mode === 'webhook' && body.d.verify_token !== this.config.verifyToken) {
            return false;
        }
        return true;
    }
    verifySN(body) {
        if (this.snMap[body.sn] && this.snMap[body.sn] - Date.now() < 1000 * 600) {
            return false;
        }
        this.snMap[body.sn] = Date.now();
        return true;
    }
    handleChallenge(eventRequest, context) {
        if (eventRequest.d.type === 255 && eventRequest.d.channel_type === 'WEBHOOK_CHALLENGE') {
            context.body = {
                challenge: eventRequest.d.challenge
            };
            return true;
        }
        return false;
    }
    /**
     * 发送频道聊天消息
     * @param type 消息类型
     * @param channelId 目标频道 id
     * @param content 消息内容
     * @param quote 回复某条消息的 msgId
     */
    sendChannelMessage(type, channelId, content, quote) {
        return this.post('v3/channel/message', {
            object_name: type,
            channel_id: channelId,
            content: content,
            quote,
            nonce: Math.random()
        });
    }
    getUserIntimacy(userId) {
        return this.get('/api/v3/intimacy/index', {
            user_id: userId
        });
    }
    updateUserIntimacy(userId, score, socialInfo, imgId) {
        return this.post('/api/v3/intimacy/update', {
            user_id: userId,
            score,
            social_info: socialInfo,
            img_id: imgId
        });
    }
    post(url, data) {
        return this.axios.post(url, JSON.stringify(data), {
            headers: {
                'Content-Type': 'application/json'
            }
        });
    }
    get(url, params) {
        return this.axios.get(url, {
            params: new URLSearchParams(params)
        });
    }
    /**
     * 启动监听
     *
     * webhook模式下会在指定端口号启动一个http服务
     */
    listen() {
        const app = new koa_1.default();
        app.use(koa_bodyparser_1.default());
        app.use(this.getMiddleware());
        this.httpServer = app;
        app.listen(this.config.port);
    }
    async getUserState() {
        const res = await this.axios.get('/v2/user/user-state');
        return res.data;
    }
    /**
     * 链接Websocket
     */
    connect() {
        throw new Error('not support yet');
    }
}
exports.KaiheilaBot = KaiheilaBot;
//# sourceMappingURL=index.js.map
