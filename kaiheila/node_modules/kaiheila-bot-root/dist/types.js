"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KMarkDownMessage = exports.AudioMessage = exports.AudioAttachment = exports.FileMesage = exports.FileAttachment = exports.VideoMessage = exports.VideoAttachment = exports.ImageMessage = exports.ImageAttachment = exports.TextMessage = exports.Attachment = exports.MessageBase = exports.User = exports.MessageType = void 0;
function defaultUser() {
    return {
        username: '',
        identifyNum: '0',
        avatar: 'https://img.kaiheila.cn/assets/avatar_1.jpg/icon',
        id: '',
        nickname: '',
        roles: [],
        bot: false,
        online: true
    };
}
var MessageType;
(function (MessageType) {
    MessageType[MessageType["text"] = 1] = "text";
    MessageType[MessageType["image"] = 2] = "image";
    MessageType[MessageType["video"] = 3] = "video";
    MessageType[MessageType["file"] = 4] = "file";
    MessageType[MessageType["voice"] = 8] = "voice";
    MessageType[MessageType["kmarkdown"] = 9] = "kmarkdown";
})(MessageType = exports.MessageType || (exports.MessageType = {}));
class User {
    constructor(rawAuthor = defaultUser()) {
        const author = defaultUser();
        Object.assign(author, rawAuthor);
        // @ts-ignore
        this.identifyNum = typeof author.identify_num === 'string' ? author.identify_num : author.identifyNum;
        this.avatar = author.avatar;
        this.bot = !!author.bot;
        this.username = author.username;
        this.id = author.id;
        this.nickname = author.nickname;
        this.roles = Array.isArray(author.roles) ? author.roles : [];
        this.online = !!author.online;
    }
}
exports.User = User;
class MessageBase {
    constructor(message) {
        this.guildId = '';
        this.type = message.type;
        this.msgId = message.msg_id;
        this.msgTimestamp = message.msg_timestamp;
        this.guildId = message.extra.guild_id;
        this.channelType = message.channel_type;
        this.channelId = message.target_id;
        this.authorId = message.author_id;
    }
}
exports.MessageBase = MessageBase;
class Attachment {
    constructor(attachment) {
        this.name = attachment.name;
        this.type = attachment.type;
        this.url = attachment.url;
    }
}
exports.Attachment = Attachment;
class TextMessage extends MessageBase {
    constructor(message) {
        super(message);
        this.type = MessageType.text;
        this.code = '';
        this.content = message.content;
        this.channelName = message.extra.channel_name;
        this.code = message.extra.code;
        this.author = new User(message.extra.author);
        if (message.extra.quote) {
            this.quote = new TextMessage(message.extra.quote);
        }
        this.mention = {
            user: message.extra.mention,
            roles: message.extra.mention_roles,
            all: message.extra.mention_all,
            here: message.extra.mention_here
        };
    }
}
exports.TextMessage = TextMessage;
class ImageAttachment extends Attachment {
    constructor() {
        super(...arguments);
        this.type = 'image';
    }
}
exports.ImageAttachment = ImageAttachment;
class ImageMessage extends MessageBase {
    constructor(message) {
        super(message);
        this.type = MessageType.image;
        this.code = '';
        this.content = message.content;
        this.code = message.extra.code;
        this.author = new User(message.extra.author);
        this.attachment = new ImageAttachment(message.extra.attachments);
    }
}
exports.ImageMessage = ImageMessage;
class VideoAttachment extends Attachment {
    constructor(attachment) {
        super(attachment);
        this.type = 'video';
        this.size = attachment.size;
        this.fileType = attachment.file_type;
        this.height = attachment.height;
        this.width = attachment.width;
        this.duration = attachment.duration;
    }
}
exports.VideoAttachment = VideoAttachment;
class VideoMessage extends MessageBase {
    constructor(message) {
        super(message);
        this.type = MessageType.video;
        this.author = new User(message.extra.author);
        this.attachment = new VideoAttachment(message.extra.attachments);
    }
}
exports.VideoMessage = VideoMessage;
class FileAttachment extends Attachment {
    constructor(attchement) {
        super(attchement);
        this.type = 'file';
        this.fileType = attchement.file_type;
        this.size = attchement.size;
    }
}
exports.FileAttachment = FileAttachment;
class FileMesage extends MessageBase {
    constructor(message) {
        super(message);
        this.type = MessageType.file;
        this.author = new User(message.extra.author);
        this.attachment = new FileAttachment(message.extra.attachments);
    }
}
exports.FileMesage = FileMesage;
/**
 * 音频附件
 *
 * 注意，这是唯一个不从Attachment类扩展出来的附件
 */
class AudioAttachment {
    constructor(attachment) {
        this.type = 'audio';
        this.voice = attachment.voice;
        this.mimeType = attachment.mime_type;
        this.duration = attachment.duration;
        this.name = 'audio';
    }
    get url() {
        return this.voice;
    }
}
exports.AudioAttachment = AudioAttachment;
class AudioMessage extends MessageBase {
    constructor(message) {
        super(message);
        this.type = MessageType.voice;
        this.author = new User(message.extra.author);
        this.attachment = new AudioAttachment(message.extra.attachments);
    }
}
exports.AudioMessage = AudioMessage;
class KMarkDownMessage extends MessageBase {
    constructor(message) {
        super(message);
        this.type = MessageType.kmarkdown;
        this.content = message.content;
        this.channelName = message.extra.channel_name;
        this.code = message.extra.code;
        this.author = new User(message.extra.author);
        this.mention = {
            user: message.extra.mention,
            roles: message.extra.mention_roles,
            all: message.extra.mention_all,
            here: message.extra.mention_here,
            channels: message.extra.nav_channels
        };
    }
}
exports.KMarkDownMessage = KMarkDownMessage;
//# sourceMappingURL=types.js.map